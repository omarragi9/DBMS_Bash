#! /usr/bin/bash

# Checking where Table Name Passed To Function or Not 
if [[ $# -eq 0 ]];
then 
echo "Syntax Error, Creat Command Must Take First Argument Representing Table Name "
else 
	
	if [[ $# -eq 1 ]];
	then
	echo "Syntax Error, Creat Command Must Take at Least One Second Argument Representing Column Name" 

	# Checking Where Database is active to use or no data base persist
	else

	if [[ $DB = "" ]];
	then
	echo "Error, There is No Database Selected"
	else 
		if [[ -e $HOME/DBMS_Project/Databases/$DB ]];
		then
			# Checking The Table that are creating is already persist or not if no the table will be created 

			if [[ -e $HOME/DBMS_Project/Databases/$DB/$1 ]];
			then 
			echo "This Table Already Exist, Change Table Name"
			else 

				valid=true
				declare -a columns						

					for arg in "${@:2:$#-1}"; 			
					do 
						if [[ $arg != "meta" ]];
						then
							columns+=("$arg")
						else 
							break
						fi
					done

					for arg2 in "${columns[@]}"; 
					do
		    				if ! [[ $arg2 =~ ^[a-zA-Z]+$ ]]; 
						then
		        				valid=false
       			 				break
    						fi
					done

			if $valid;
			then

				if [[ ${@:2:$#-1} =~ "meta" ]];
				then
					declare -a col
					declare -A arr				# declaring associative array to check wether the passed column are unique or not 
					duplicatefound=false			# if the value of duplicatefound is false this means that there is no duplication in column names

					for t in "${@:2:$#-1}"; 			# Iterate through the column names
					do 
						if [[ $t != "meta" ]];
						then
							col+=("$t")
						else 
							break
						fi
					done

					for i in "${col[@]}";
					do
    					if [[ -n ${arr[$i]} ]]; 		# Check if the column name is already in the associative array
					then
       					duplicatefound=true
     				   	break
  				  	else
  				  		arr[$i]=1
					fi 				# Mark this column name as seen
					done

					if [[ $duplicatefound == false ]]; 	# If no duplicates are found, create the table
					then
						declare -a types

						for x in "${@:$((${#col[@]} + 3)):$#}"; 
						do
    							types+=("$x")
						done


						if [[ ${#col[@]} = ${#types[@]} ]];
						then

							declare -i typescheck=0
							for v in ${types[@]};
							do
								if [[ $v = "int-PK" ]] || [[ $v = "string" ]] || [[ $v = "int" ]];
								then
									typescheck=0
								else
									typescheck=1
								break
								fi
							done
		


							if [[ $typescheck = 1 ]];
							then	
								echo "Error, Undefiend Data Types"
							else
								touch $HOME/DBMS_Project/Databases/$DB/$1
								IFS=','; echo "${col[*]}" > "$HOME/DBMS_Project/Databases/$DB/$1"
								touch $HOME/DBMS_Project/Databases/$DB/$1-"meta"
		
								for val in ${!col[@]};
								do
									echo ${col[$val]} ":" ${types[$val]} >> $HOME/DBMS_Project/Databases/$DB/$1-"meta"
								done
								echo "$1 Table has been Created "
							fi
	
						else
						echo "Error, The Size of Meta Data Not Equal to The Size of Columns "
						fi
					else
					echo "Syntax Error, Not Accepted to Enter Two or more Columns with Similar Names "
					fi
				else
				echo "Syntax Error, There is No Meta Data Defined"
				fi
				else
				echo "Syntax Error, Not Accepted to Enter Column Name Other than String "
				fi					# Using From the Second argument passed to the last argument as columns names
			fi
		else
		echo "There is No Database called $DB "		# If the data base are not selected using use command it tells user that database is not exist
		fi
	fi

	fi
fi

