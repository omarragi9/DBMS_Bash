#!/usr/bin/bash
shopt -s extglob
source connectDB
dbname=$(connectDB)
##################################################################
<< COMMENT
	Function to check the value of the primary key that the user enters if it's found in the table or not
COMMENT

function check_value(){
	ids=`cut -d: -f1 test_data | tail -n+2`
	for id in $ids
	do
		if (( id != $key ))
		then
			continue
		else
			echo "Found"
			break
		fi
	done
	
}
##################################################################
<< COMMENT
	Function to check if the value that is entered by the user is int or not "Error"
COMMENT

function check_int(){

	for i in $@
	do
		case $i in
			+([0-9]))
				echo 1
				;;
			*)	
				echo 0
		esac
	done

}

##################################################################
<< COMMENT
	Function that update the table to the new value
COMMENT

function substitute(){
	awk -v key="$1" -v cols="$2" -v new_vals="$3" '
        BEGIN {
            FS=":"
        }

        {
            if ($1 == key) {
                split(cols, indices, " ")
                split(new_vals, values, " ")
                for (i = 1; i <= length(indices); i++) {
                    if (i in indices) {
                        $(indices[i]) = values[i]
                    }
                }
            }
            
            gsub(" ", ":")
            print $0
        }
    ' "$4"
}

##################################################################

<< COMMENT
	Function to check if this table is exist
COMMENT

function check_table(){

	if [[ -f $1 ]]
	then 
		echo "Found"
	else
		echo "Error!! Table not found"
		exit
	fi


}
##################################################################

<< COMMENT
	Function to get the tpyes of columns that the user choose from meta file
COMMENT

function types_of_meta() {
    if [[ -f $1 ]]; then
        declare -a output=()
        awk -v col_num="$2" -v new_val="$3" '
            BEGIN {
                FS="="
                split(col_num, arr, " ")
                split(new_val, vals, " ")
                arr_len = length(arr)
            }
            {
                for (i in arr) {
                    if (NR == arr[i]) {
                        output[i] = $2
                    }
                }
            }
            END {
                for (i = 1; i <= arr_len; i++) {
                    print output[i]
                }
            }
        ' "$1"
    else
        echo "Meta data file not found!!"
        exit 1
    fi
}
##################################################################
function updateTB(){
	
	read -p "Enter your table name : " table
	check_table $table
	columns=`cat test_meta`
	echo "These are the coulmns that in your table : "
	counter=0

	for column in $columns
	do
		((counter++))
 		echo "$counter) $column"
	done
	
	read -p "Enter the index of columns you want to update \"Separated by space\": " col_num
	check_int $col_num
	read -p "Enter the primary key that of the record you want to update : " key
	check_int $key
	check_value $key

	declare -a old_val=() new_val=()
	i=0
	counter=1
	read -r -a col_array <<< "$col_num"
	for i in ${!col_array[@]}
	do
		read -p "Enter the new value of the row number $counter : " new_val[$i]
		t=$(check_int "${new_val[$i]}")
		echo $t
		echo ${new_val[$i]}
		t1=$(check_int "${col_array[$i]}")
		echo $t1
		echo ${col_array[$i]}
		#((i++))
		((counter++))
	done
	types_of_meta test_meta "$col_num" "$new_val"
	substitute "$key" "${col_num[*]}" "${new_val[*]}" "$table"
	
}
updateTB
